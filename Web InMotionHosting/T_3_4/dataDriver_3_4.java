package T_3_4;

import org.testng.annotations.Test;

import io.github.bonigarcia.wdm.WebDriverManager;

import org.testng.annotations.BeforeTest;

import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
//import java.util.Arrays;
import java.util.List;

//import java.io.IOException;
import java.time.Duration;

//import org.json.simple.parser.ParseException;


import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;

public class dataDriver_3_4 {
  
	private WebDriver driver;
	
	public String getPackagePath() {
	    String className = this.getClass().getName(); // L·∫•y t√™n ƒë·∫ßy ƒë·ªß c·ªßa class (bao g·ªìm package)
	    String packageName = className.substring(0, className.lastIndexOf(".")); // C·∫Øt ph·∫ßn package
	    return packageName.replace(".", "/"); // Chuy·ªÉn d·∫•u `.` th√†nh `/` ƒë·ªÉ t·∫°o ƒë∆∞·ªùng d·∫´n
	}
	
	// üìå Ph∆∞∆°ng th·ª©c ƒë·ªçc file JSON b·∫±ng JSON Simple
	public List<String> readExpectedOptionsFromJson(String fileName) {
	    List<String> expectedOptions = new ArrayList<>();
	    try {
	        // ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·∫øn th∆∞ m·ª•c data
	    	String packagePath = getPackagePath();
	    	String filePath = "src/" + packagePath + "/data/" + fileName;
	        File file = new File(filePath); 
	        
	        if (!file.exists()) {
	            System.out.println("‚ùå File JSON kh√¥ng t·ªìn t·∫°i: " + file.getAbsolutePath());
	            return expectedOptions;
	        }

	        JSONParser jsonParser = new JSONParser();
	        JSONObject jsonObject = (JSONObject) jsonParser.parse(new FileReader(file));

	        JSONArray jsonArray = (JSONArray) jsonObject.get("expectedResults");
	        for (Object item : jsonArray) {
	            expectedOptions.add((String) item);
	        }

	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    return expectedOptions;
	}
	
	public void acceptCookies() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
		WebElement cookie = wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.id("onetrust-banner-sdk")
		));
		
		WebElement acceptBtn = cookie.findElement(By.id("onetrust-accept-btn-handler"));
		acceptBtn.click();
		
		try {
            WebElement newContentBtn = wait.until(ExpectedConditions.elementToBeClickable(By.id("onesignal-slidedown-cancel-button")));
            newContentBtn.click();
            System.out.println("ƒê√£ h·ªßy nh·∫≠n th√¥ng b√°o n·ªôi dung m·ªõi!");
        } catch (Exception e) {
            System.out.println("Kh√¥ng t√¨m th·∫•y th√¥ng b√°o, b·ªè qua...");
        }
		
	}

	@BeforeTest
	public void beforeTest() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.inmotionhosting.com/support/product-guides/minecraft/");
	}

	@Test(priority = 1)
	public void testTitleOfItemMinecraft() throws InterruptedException {
		 acceptCookies();
		 Thread.sleep(1000);
        // üìå ƒê·ªçc danh s√°ch mong ƒë·ª£i t·ª´ file JSON
		List<String> expectedOptions = readExpectedOptionsFromJson("TitleOfItemMinecraft.json");

        // T√¨m t·∫•t c·∫£ c√°c m·ª•c con trong dropdown
        List<WebElement> title = driver.findElements(By.xpath("/html/body/div[3]/main/div/div[2]/div[1]/article[1]/header/h2/a"));
        
        System.out.println("T√™n ti√™u ƒë·ªÅ h∆∞·ªõng d·∫´n c·ªßa m·ª•c Minecraft:");
        
        List<String> actualOptions = new ArrayList<>();
        
        // L·∫∑p qua danh s√°ch c√°c m·ª•c v√† l·∫•y text
        for (WebElement item : title) {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            String text = (String) js.executeScript("return arguments[0].textContent;", item);
            actualOptions.add(text.trim()); // Th√™m v√†o danh s√°ch th·ª±c t·∫ø
            System.out.println("- " + text.trim());
        }

        // So s√°nh danh s√°ch th·ª±c t·∫ø v·ªõi mong ƒë·ª£i
        if (actualOptions.equals(expectedOptions)) {
            System.out.println("‚úÖ K·∫øt qu·∫£ ƒë√∫ng: T√™n ti√™u ƒë·ªÅ kh·ªõp v·ªõi mong ƒë·ª£i!");
        } else {
            System.out.println("‚ùå K·∫øt qu·∫£ sai! T√™n ti√™u ƒë·ªÅ th·ª±c t·∫ø kh√¥ng kh·ªõp v·ªõi mong ƒë·ª£i.");
            System.out.println("Expected: " + expectedOptions);
            System.out.println("Actual: " + actualOptions);
        }

        Thread.sleep(2000);
    }
	
	@Test(priority = 2)
	public void testDescription() throws InterruptedException {
        // üìå ƒê·ªçc danh s√°ch mong ƒë·ª£i t·ª´ file JSON
		List<String> expectedOptions = readExpectedOptionsFromJson("Description.json");

        // T√¨m t·∫•t c·∫£ c√°c m·ª•c con trong dropdown
        List<WebElement> title = driver.findElements(By.xpath("/html/body/div[3]/main/div/div[2]/div[1]/header/div/p"));
        
        System.out.println("N·ªôi dung m√¥ t·∫£ c·ªßa m·ª•c Minecraft:");
        
        List<String> actualOptions = new ArrayList<>();
        
        // L·∫∑p qua danh s√°ch c√°c m·ª•c v√† l·∫•y text
        for (WebElement item : title) {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            String text = (String) js.executeScript("return arguments[0].textContent;", item);
            actualOptions.add(text.trim()); // Th√™m v√†o danh s√°ch th·ª±c t·∫ø
            System.out.println("- " + text.trim());
        }

        // So s√°nh danh s√°ch th·ª±c t·∫ø v·ªõi mong ƒë·ª£i
        if (actualOptions.equals(expectedOptions)) {
            System.out.println("‚úÖ K·∫øt qu·∫£ ƒë√∫ng: N·ªôi dung m√¥ t·∫£ kh·ªõp v·ªõi mong ƒë·ª£i!");
        } else {
            System.out.println("‚ùå K·∫øt qu·∫£ sai! N·ªôi dung m√¥ t·∫£ th·ª±c t·∫ø kh√¥ng kh·ªõp v·ªõi mong ƒë·ª£i.");
            System.out.println("Expected: " + expectedOptions);
            System.out.println("Actual: " + actualOptions);
        }

        Thread.sleep(2000);
    }

	@Test(priority = 3)
	public void testContent() throws InterruptedException {
        // üìå ƒê·ªçc danh s√°ch mong ƒë·ª£i t·ª´ file JSON
		List<String> expectedOptions = readExpectedOptionsFromJson("Content.json");

        // T√¨m t·∫•t c·∫£ c√°c m·ª•c con trong dropdown
        List<WebElement> title = driver.findElements(By.xpath("/html/body/div[3]/main/div/div[2]/div[1]/article[1]/div/p"));
        
        System.out.println("N·ªôi dung trong How to Add a Modpack to your Minecraft Server:");
        
        List<String> actualOptions = new ArrayList<>();
        
        // L·∫∑p qua danh s√°ch c√°c m·ª•c v√† l·∫•y text
        for (WebElement item : title) {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            String text = (String) js.executeScript("return arguments[0].textContent;", item);
            actualOptions.add(text.trim()); // Th√™m v√†o danh s√°ch th·ª±c t·∫ø
            System.out.println("- " + text.trim());
        }

        // So s√°nh danh s√°ch th·ª±c t·∫ø v·ªõi mong ƒë·ª£i
        if (actualOptions.equals(expectedOptions)) {
            System.out.println("‚úÖ K·∫øt qu·∫£ ƒë√∫ng: N·ªôi dung kh·ªõp v·ªõi mong ƒë·ª£i!");
        } else {
            System.out.println("‚ùå K·∫øt qu·∫£ sai! N·ªôi dung th·ª±c t·∫ø kh√¥ng kh·ªõp v·ªõi mong ƒë·ª£i.");
            System.out.println("Expected: " + expectedOptions);
            System.out.println("Actual: " + actualOptions);
        }

        Thread.sleep(2000);
    }
	
	@AfterTest
	public void afterTest() {
		driver.quit();
	}
}

